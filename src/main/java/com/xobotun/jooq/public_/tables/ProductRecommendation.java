/*
 * This file is generated by jOOQ.
 */
package com.xobotun.jooq.public_.tables;


import com.xobotun.jooq.public_.Keys;
import com.xobotun.jooq.public_.Public;
import com.xobotun.jooq.public_.tables.records.ProductRecommendationRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductRecommendation extends TableImpl<ProductRecommendationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.product_recommendation</code>
     */
    public static final ProductRecommendation PRODUCT_RECOMMENDATION = new ProductRecommendation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductRecommendationRecord> getRecordType() {
        return ProductRecommendationRecord.class;
    }

    /**
     * The column <code>public.product_recommendation.id</code>.
     */
    public final TableField<ProductRecommendationRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.product_recommendation.product_id1</code>.
     */
    public final TableField<ProductRecommendationRecord, Integer> PRODUCT_ID1 = createField(DSL.name("product_id1"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.product_recommendation.product_id2</code>.
     */
    public final TableField<ProductRecommendationRecord, Integer> PRODUCT_ID2 = createField(DSL.name("product_id2"), SQLDataType.INTEGER.nullable(false), this, "");

    private ProductRecommendation(Name alias, Table<ProductRecommendationRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProductRecommendation(Name alias, Table<ProductRecommendationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.product_recommendation</code> table
     * reference
     */
    public ProductRecommendation(String alias) {
        this(DSL.name(alias), PRODUCT_RECOMMENDATION);
    }

    /**
     * Create an aliased <code>public.product_recommendation</code> table
     * reference
     */
    public ProductRecommendation(Name alias) {
        this(alias, PRODUCT_RECOMMENDATION);
    }

    /**
     * Create a <code>public.product_recommendation</code> table reference
     */
    public ProductRecommendation() {
        this(DSL.name("product_recommendation"), null);
    }

    public <O extends Record> ProductRecommendation(Table<O> child, ForeignKey<O, ProductRecommendationRecord> key) {
        super(child, key, PRODUCT_RECOMMENDATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ProductRecommendationRecord, Integer> getIdentity() {
        return (Identity<ProductRecommendationRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProductRecommendationRecord> getPrimaryKey() {
        return Keys.PRODUCT_RECOMMENDATION_PKEY;
    }

    @Override
    public List<ForeignKey<ProductRecommendationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PRODUCT_RECOMMENDATION__PRODUCT_RECOMMENDATION_PRODUCT_ID1_FKEY, Keys.PRODUCT_RECOMMENDATION__PRODUCT_RECOMMENDATION_PRODUCT_ID2_FKEY);
    }

    private transient Product _productRecommendationProductId1Fkey;
    private transient Product _productRecommendationProductId2Fkey;

    /**
     * Get the implicit join path to the <code>public.product</code> table, via
     * the <code>product_recommendation_product_id1_fkey</code> key.
     */
    public Product productRecommendationProductId1Fkey() {
        if (_productRecommendationProductId1Fkey == null)
            _productRecommendationProductId1Fkey = new Product(this, Keys.PRODUCT_RECOMMENDATION__PRODUCT_RECOMMENDATION_PRODUCT_ID1_FKEY);

        return _productRecommendationProductId1Fkey;
    }

    /**
     * Get the implicit join path to the <code>public.product</code> table, via
     * the <code>product_recommendation_product_id2_fkey</code> key.
     */
    public Product productRecommendationProductId2Fkey() {
        if (_productRecommendationProductId2Fkey == null)
            _productRecommendationProductId2Fkey = new Product(this, Keys.PRODUCT_RECOMMENDATION__PRODUCT_RECOMMENDATION_PRODUCT_ID2_FKEY);

        return _productRecommendationProductId2Fkey;
    }

    @Override
    public ProductRecommendation as(String alias) {
        return new ProductRecommendation(DSL.name(alias), this);
    }

    @Override
    public ProductRecommendation as(Name alias) {
        return new ProductRecommendation(alias, this);
    }

    @Override
    public ProductRecommendation as(Table<?> alias) {
        return new ProductRecommendation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductRecommendation rename(String name) {
        return new ProductRecommendation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductRecommendation rename(Name name) {
        return new ProductRecommendation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductRecommendation rename(Table<?> name) {
        return new ProductRecommendation(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
